{"version":3,"sources":["components/card/Card.component.jsx","components/card-list/CardList.component.jsx","components/scroll/scroll.component.jsx","components/search-box/SearchBox.component.jsx","components/error-boundaries/ErrorBoundary.js","containers/App.js","redux/actions.js","redux/types.js","redux/reducers.js","serviceWorker.js","index.js"],"names":["Card","robot","id","name","email","className","src","alt","CardList","robots","map","key","styles","overflowY","height","border","Scroll","props","style","children","SearchBox","handleChange","aria-label","type","placeholder","onChange","ErrorBoundary","state","hasError","error","errorInfo","this","setState","Component","App","onRequestRobots","onSearchChange","searchField","isPending","filteredCats","filter","toLowerCase","includes","React","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","initialStateSearch","initialStateRobots","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","addEventListener","request","url","respondWith","caches","onSuccess","createLogger","middlewares","thunkMiddleware","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.85bca7d6.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ robot }) => {\r\n    const { id, name, email } = robot;\r\n    return (\r\n    <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 tc'>\r\n        <img src={`https://robohash.org/${ id }?size=300x300&set=set4`} alt='Robot friend' />\r\n        <div>\r\n            <h2>{ name }</h2>\r\n            <p>{ email }</p>\r\n        </div>\r\n    </div>\r\n)};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\n\r\nimport Card from \"../card/Card.component\";\r\n\r\nconst CardList = ({ robots }) => (\r\n    <div>\r\n        {\r\n            robots.map(robot => {\r\n               return (\r\n                    <Card key={robot.id} robot={robot} />\r\n               )\r\n            })\r\n        }\r\n    </div>\r\n);\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst styles = {\r\n    overflowY: 'scroll',\r\n    height: '800px',\r\n    border: '1px solid black'\r\n};\r\n\r\nconst Scroll = props => (\r\n    <div style={ styles }>\r\n        { props.children }\r\n    </div>\r\n);\r\n\r\nexport default Scroll;\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({ handleChange }) => (\r\n  <div className=\"pa2\">\r\n    <input\r\n        aria-label=\"Search for Cats\"\r\n        className=\"pa3 ba b--green bg-lightest-blue\"\r\n        type=\"search\"\r\n        placeholder=\"Search for Cats\"\r\n        onChange={ handleChange } />\r\n  </div>\r\n);\r\n\r\nexport default SearchBox;\r\n","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        this.setState({ hasError: true })\r\n    }\r\n\r\n    render() {\r\n        if(this.state.hasError) {\r\n            return <h1>Oops, something went wrong</h1>\r\n        } else {\r\n            return this.props.children;\r\n        }\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport CardList from \"../components/card-list/CardList.component\";\r\nimport Scroll from \"../components/scroll/scroll.component\";\r\nimport SearchBox from \"../components/search-box/SearchBox.component\";\r\nimport ErrorBoundary from \"../components/error-boundaries/ErrorBoundary\";\r\n\r\nimport {setSearchField, requestRobots} from \"../redux/actions\";\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onSearchChange: event => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobots())\r\n    }\r\n};\r\n\r\nclass App extends React.Component {\r\n\r\n    componentDidMount() {\r\n        this.props.onRequestRobots()\r\n    }\r\n\r\n    render() {\r\n        const { onSearchChange, searchField, robots, isPending } = this.props;\r\n        const filteredCats = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n        });\r\n        return (\r\n                <div className=\"tc\">\r\n                    <h1 className=\"f1 white-90\">CatFriends</h1>\r\n                    <SearchBox handleChange={ onSearchChange } />\r\n                    <Scroll>\r\n                        {\r\n                            isPending ?\r\n                                <h1 className='f1 white-90 tc'>Loading</h1> :\r\n                                <ErrorBoundary>\r\n                                    <CardList robots={ filteredCats } />\r\n                                </ErrorBoundary>\r\n                        }\r\n                    </Scroll>\r\n                </div>\r\n            );\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAIL } from \"./types\";\r\n\r\nexport const setSearchField = text => ({\r\n   type: CHANGE_SEARCH_FIELD,\r\n   payload: text\r\n});\r\n\r\nexport const requestRobots = () => dispatch => {\r\n   dispatch({type: REQUEST_ROBOTS_PENDING});\r\n   fetch('https://jsonplaceholder.typicode.com/users')\r\n       .then(response => response.json())\r\n       .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n       .catch(error => dispatch({ type: REQUEST_ROBOTS_FAIL, payload: error }));\r\n};\r\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAIL = 'REQUEST_ROBOTS_FAIL';\r\n","import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAIL } from \"./types\";\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n};\r\n\r\nexport const searchRobots = (state = initialStateSearch, action) => {\r\n    switch (action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, {searchField: action.payload});\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n};\r\n\r\nexport const requestRobots = (state = initialStateRobots, action={}) => {\r\n    switch (action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, {isPending: true});\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, {robots: action.payload, isPending: false});\r\n        case REQUEST_ROBOTS_FAIL:\r\n            return Object.assign({}, state, {error: action.payload, isPending: false});\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              window.addEventListener('fetch', function (event) {\n                console.log(event.request.url);\n                event.respondWith(\n                    caches.match(event.request).then(function (response) {\n                      if(response) {\n                        console.log('[fetch] Returning from Service Worker cache: ', event.request.url );\n                        return response;\n                      }\n\n                      console.log('[fetch] Returning from server: ', event.request.url);\n                      return fetch(event.request);\n                    })\n                );\n              });\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport { createLogger } from \"redux-logger\";\nimport thunkMiddleware from \"redux-thunk\";\nimport './index.css';\nimport App from './containers/App';\nimport 'tachyons';\nimport { searchRobots, requestRobots } from \"./redux/reducers\";\nimport * as serviceWorker from './serviceWorker';\n\nconst logger = createLogger();\n\nconst middlewares = [thunkMiddleware];\n\nif(process.env.NODE_ENV === 'development') {\n    middlewares.push(logger)\n}\n\nconst rootReducer = combineReducers({searchRobots, requestRobots});\nconst store = createStore(rootReducer, applyMiddleware(...middlewares));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}